{"ast":null,"code":"var _jsxFileName = \"/home/willbroad/Documents/enock_projects/BMS/frontend/bridge/src/component/Charts.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\n// src/components/LineChart.tsx\n\nimport React, { useEffect, useState } from 'react';\nimport ReactApexChart from 'react-apexcharts';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://127.0.0.1:5050');\n\n// use socket client to update this data from the server\n\n// {   \"deviceId\": \"8923\", \n//     \"vib\": \"43.23\",    // vibration\n//     \"temp\": \"32\",      // temperature\n//     \"wgt\": \"8.324\"     // weight\n//      \"createdAt\": \"2024-07-03T19:51:18.931Z\", \n//      \"updatedAt\": \"2024-07-03T19:51:18.931Z\",  // use format hh:mm:ss\n// }\n\n// src/components/LineChart.tsx\n\nexport const LineChart = () => {\n  _s();\n  const [series, setSeries] = useState([{\n    name: 'Vibration',\n    data: []\n  }]);\n  const options = {\n    chart: {\n      type: 'line',\n      animations: {\n        enabled: true,\n        easing: 'linear',\n        dynamicAnimation: {\n          speed: 1000\n        }\n      }\n    },\n    colors: ['#28a745'],\n    stroke: {\n      curve: 'smooth'\n    },\n    xaxis: {\n      type: 'datetime'\n    },\n    tooltip: {\n      x: {\n        format: 'HH:mm:ss'\n      }\n    }\n  };\n  useEffect(() => {\n    socket.on('data-logs', data => {\n      setSeries(prevSeries => [{\n        ...prevSeries[0],\n        data: [...prevSeries[0].data, {\n          x: new Date(data.createdAt).getTime(),\n          y: parseFloat(data.vib)\n        }]\n      }]);\n    });\n    return () => {\n      socket.off('data-logs');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-4 rounded shadow h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Vibration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: series,\n      type: \"line\",\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(LineChart, \"wH2FQ8B2phVQcA3dx5wGVzwVqsM=\");\n_c = LineChart;\nexport const LineChart1 = () => {\n  _s2();\n  const [series, setSeries] = useState([{\n    name: 'Weight',\n    data: []\n  }]);\n  const options = {\n    chart: {\n      type: 'line',\n      animations: {\n        enabled: true,\n        easing: 'linear',\n        dynamicAnimation: {\n          speed: 1000\n        }\n      }\n    },\n    colors: ['#007bff'],\n    stroke: {\n      curve: 'smooth'\n    },\n    xaxis: {\n      type: 'datetime'\n    },\n    tooltip: {\n      x: {\n        format: 'HH:mm:ss'\n      }\n    }\n  };\n  useEffect(() => {\n    socket.on('data-logs', data => {\n      setSeries(prevSeries => [{\n        ...prevSeries[0],\n        data: [...prevSeries[0].data, {\n          x: new Date(data.createdAt).getTime(),\n          y: parseFloat(data.wgt)\n        }]\n      }]);\n    });\n    return () => {\n      socket.off('data-logs');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-4 rounded shadow h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Weight\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: series,\n      type: \"line\",\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s2(LineChart1, \"Pz5up1WmMBCGtfL4qTb8/gtsNsY=\");\n_c2 = LineChart1;\nexport const LineChart2 = () => {\n  _s3();\n  const [series, setSeries] = useState([{\n    name: 'Temperature',\n    data: []\n  }]);\n  const options = {\n    chart: {\n      type: 'line',\n      animations: {\n        enabled: true,\n        easing: 'linear',\n        dynamicAnimation: {\n          speed: 1000\n        }\n      }\n    },\n    colors: ['#dc3545'],\n    stroke: {\n      curve: 'smooth'\n    },\n    xaxis: {\n      type: 'datetime'\n    },\n    tooltip: {\n      x: {\n        format: 'HH:mm:ss'\n      }\n    }\n  };\n  useEffect(() => {\n    socket.on('data-logs', data => {\n      setSeries(prevSeries => [{\n        ...prevSeries[0],\n        data: [...prevSeries[0].data, {\n          x: new Date(data.createdAt).getTime(),\n          y: parseFloat(data.temp)\n        }]\n      }]);\n    });\n    return () => {\n      socket.off('data-logs');\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-4 rounded shadow h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Temperature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: series,\n      type: \"line\",\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n};\n\n// export const AreaChart: React.FC = () => {\n//     const [series, setSeries] = useState([\n//         {\n//             name: 'Vibration',\n//             data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n//         },\n//         {\n//             name: 'Weight',\n//             data: [50, 55, 52, 56, 54, 53, 51, 55, 52]\n//         }\n//     ]);\n\n//     const options: ApexOptions = {\n//         chart: {\n//             type: 'area',\n//             animations: {\n//                 enabled: true,\n//                 easing: 'linear',\n//                 dynamicAnimation: {\n//                     speed: 1000\n//                 }\n//             }\n//         },\n//         colors: ['#28a745', '#dc3545'],\n//         stroke: {\n//             curve: 'smooth'\n//         },\n//         xaxis: {\n//             type: 'datetime',\n//             categories: [\n//                 '2023-06-01T00:00:00Z',\n//                 '2023-06-02T00:00:00Z',\n//                 '2023-06-03T00:00:00Z',\n//                 '2023-06-04T00:00:00Z',\n//                 '2023-06-05T00:00:00Z',\n//                 '2023-06-06T00:00:00Z',\n//                 '2023-06-07T00:00:00Z',\n//                 '2023-06-08T00:00:00Z',\n//                 '2023-06-09T00:00:00Z'\n//             ]\n//         },\n//         tooltip: {\n//             x: {\n//                 format: 'dd MMM yyyy'\n//             }\n//         }\n//     };\n\n//     useEffect(() => {\n//         // Simulate real-time data update\n//         const interval = setInterval(() => {\n//             setSeries(prevSeries => [\n//                 {\n//                     ...prevSeries[0],\n//                     data: prevSeries[0].data.map(value => value + Math.random() * 10 - 5)\n//                 },\n//                 {\n//                     ...prevSeries[1],\n//                     data: prevSeries[1].data.map(value => value + Math.random() * 3 - 1.5)\n//                 }\n//             ]);\n//         }, 2000);\n\n//         return () => clearInterval(interval);\n//     }, []);\n\n//     return (\n//         <div className=\"bg-white p-4 rounded shadow h-full\">\n//             <h2 className=\"text-xl font-bold mb-4\">Bridge Vibration over Time </h2>\n//             <ReactApexChart options={options} series={series} type=\"area\" height={300} />\n//         </div>\n//     );\n// };\n_s3(LineChart2, \"j5b1HsPLEh/2fZfTjIB2IEUqthU=\");\n_c3 = LineChart2;\nexport const BarChart = () => {\n  _s4();\n  const [series, setSeries] = useState([{\n    name: 'Vibration',\n    data: []\n  }, {\n    name: 'Weight',\n    data: []\n  }]);\n  const options = {\n    chart: {\n      type: 'bar',\n      stacked: true,\n      toolbar: {\n        show: false\n      },\n      animations: {\n        enabled: true,\n        easing: 'linear',\n        dynamicAnimation: {\n          speed: 1000\n        }\n      }\n    },\n    plotOptions: {\n      bar: {\n        horizontal: true,\n        barHeight: '80%'\n      }\n    },\n    colors: ['#28a745', '#007bff'],\n    xaxis: {\n      type: 'numeric',\n      labels: {\n        formatter: function (val) {\n          return new Date(val).toLocaleTimeString();\n        }\n      }\n    },\n    dataLabels: {\n      enabled: false\n    },\n    tooltip: {\n      y: {\n        formatter: function (val) {\n          return val.toFixed(2);\n        }\n      }\n    }\n  };\n  useEffect(() => {\n    // Simulate real-time data update\n    const interval = setInterval(() => {\n      const now = Date.now();\n      setSeries(prevSeries => [{\n        ...prevSeries[0],\n        data: [...prevSeries[0].data.slice(-10), {\n          x: now,\n          y: Math.random() * 1000\n        }]\n      }, {\n        ...prevSeries[1],\n        data: [...prevSeries[1].data.slice(-10), {\n          x: now,\n          y: Math.random() * 2000\n        }]\n      }]);\n    }, 10000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-4 rounded shadow h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Vibration over Weight\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: series,\n      type: \"bar\",\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 9\n  }, this);\n};\n_s4(BarChart, \"jstX6jRahrCAuwAxpplg2m2hnCA=\");\n_c4 = BarChart;\nexport const BarChart2 = () => {\n  _s5();\n  const [series, setSeries] = useState([{\n    name: 'Vibration',\n    data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n  }, {\n    name: 'Temperature',\n    data: [25, 30, 28, 32, 29, 27, 26, 31, 30]\n  }, {\n    name: 'Weight',\n    data: [50, 55, 52, 56, 54, 53, 51, 55, 52]\n  }]);\n  const options = {\n    chart: {\n      type: 'bar',\n      animations: {\n        enabled: true,\n        easing: 'linear',\n        dynamicAnimation: {\n          speed: 1000\n        }\n      }\n    },\n    colors: ['#28a745', '#007bff', '#dc3545'],\n    xaxis: {\n      type: 'datetime',\n      categories: ['2023-06-01T00:00:00Z', '2023-06-02T00:00:00Z', '2023-06-03T00:00:00Z', '2023-06-04T00:00:00Z', '2023-06-05T00:00:00Z', '2023-06-06T00:00:00Z', '2023-06-07T00:00:00Z', '2023-06-08T00:00:00Z', '2023-06-09T00:00:00Z']\n    },\n    tooltip: {\n      x: {\n        format: 'dd MMM yyyy'\n      }\n    }\n  };\n  useEffect(() => {\n    // Simulate real-time data update\n    const interval = setInterval(() => {\n      setSeries(prevSeries => [{\n        ...prevSeries[0],\n        data: prevSeries[0].data.map(value => value + Math.random() * 10 - 5)\n      }, {\n        ...prevSeries[1],\n        data: prevSeries[1].data.map(value => value + Math.random() * 2 - 1)\n      }, {\n        ...prevSeries[2],\n        data: prevSeries[2].data.map(value => value + Math.random() * 3 - 1.5)\n      }]);\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white p-4 rounded shadow h-full\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \" Vibration over Temperature\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n      options: options,\n      series: series,\n      type: \"bar\",\n      height: 300\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 9\n  }, this);\n};\n_s5(BarChart2, \"avO/NHf7WlGeCZQsAKuSjWXChMs=\");\n_c5 = BarChart2;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"LineChart\");\n$RefreshReg$(_c2, \"LineChart1\");\n$RefreshReg$(_c3, \"LineChart2\");\n$RefreshReg$(_c4, \"BarChart\");\n$RefreshReg$(_c5, \"BarChart2\");","map":{"version":3,"names":["React","useEffect","useState","ReactApexChart","io","jsxDEV","_jsxDEV","socket","LineChart","_s","series","setSeries","name","data","options","chart","type","animations","enabled","easing","dynamicAnimation","speed","colors","stroke","curve","xaxis","tooltip","x","format","on","prevSeries","Date","createdAt","getTime","y","parseFloat","vib","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","height","_c","LineChart1","_s2","wgt","_c2","LineChart2","_s3","temp","_c3","BarChart","_s4","stacked","toolbar","show","plotOptions","bar","horizontal","barHeight","labels","formatter","val","toLocaleTimeString","dataLabels","toFixed","interval","setInterval","now","slice","Math","random","clearInterval","_c4","BarChart2","_s5","categories","map","value","_c5","$RefreshReg$"],"sources":["/home/willbroad/Documents/enock_projects/BMS/frontend/bridge/src/component/Charts.tsx"],"sourcesContent":["// src/components/LineChart.tsx\n\nimport { ApexOptions } from 'apexcharts';\nimport React, { useEffect, useState } from 'react';\nimport ReactApexChart from 'react-apexcharts';\n\nimport io from 'socket.io-client';\n\nconst socket = io('http://127.0.0.1:5050'); \n\n// use socket client to update this data from the server\n\n// {   \"deviceId\": \"8923\", \n//     \"vib\": \"43.23\",    // vibration\n//     \"temp\": \"32\",      // temperature\n//     \"wgt\": \"8.324\"     // weight\n//      \"createdAt\": \"2024-07-03T19:51:18.931Z\", \n//      \"updatedAt\": \"2024-07-03T19:51:18.931Z\",  // use format hh:mm:ss\n// }\n\n// src/components/LineChart.tsx\n\nexport const LineChart: React.FC = () => {\n    const [series, setSeries] = useState([\n        {\n            name: 'Vibration',\n            data: []\n        }\n    ]);\n\n    const options: ApexOptions = {\n        chart: {\n            type: 'line',\n            animations: {\n                enabled: true,\n                easing: 'linear',\n                dynamicAnimation: {\n                    speed: 1000\n                }\n            }\n        },\n        colors: ['#28a745'],\n        stroke: {\n            curve: 'smooth'\n        },\n        xaxis: {\n            type: 'datetime'\n        },\n        tooltip: {\n            x: {\n                format: 'HH:mm:ss'\n            }\n        }\n    };\n\n    useEffect(() => {\n        socket.on('data-logs', (data) => {\n            setSeries((prevSeries) => [\n                {\n                    ...prevSeries[0],\n                    data: [...prevSeries[0].data, { x: new Date(data.createdAt).getTime(), y: parseFloat(data.vib) }]\n                }\n            ]);\n        });\n\n        return () => {\n            socket.off('data-logs');\n        };\n    }, []);\n\n    return (\n        <div className=\"bg-white p-4 rounded shadow h-full\">\n            <h2 className=\"text-xl font-bold mb-4\">Vibration</h2>\n            <ReactApexChart options={options} series={series} type=\"line\" height={300} />\n        </div>\n    );\n};\nexport const LineChart1: React.FC = () => {\n    const [series, setSeries] = useState([\n        {\n            name: 'Weight',\n            data: []\n        }\n    ]);\n\n    const options: ApexOptions = {\n        chart: {\n            type: 'line',\n            animations: {\n                enabled: true,\n                easing: 'linear',\n                dynamicAnimation: {\n                    speed: 1000\n                }\n            }\n        },\n        colors: ['#007bff'],\n        stroke: {\n            curve: 'smooth'\n        },\n        xaxis: {\n            type: 'datetime'\n        },\n        tooltip: {\n            x: {\n                format: 'HH:mm:ss'\n            }\n        }\n    };\n\n    useEffect(() => {\n        socket.on('data-logs', (data) => {\n            setSeries((prevSeries) => [\n                {\n                    ...prevSeries[0],\n                    data: [...prevSeries[0].data, { x: new Date(data.createdAt).getTime(), y: parseFloat(data.wgt) }]\n                }\n            ]);\n        });\n\n        return () => {\n            socket.off('data-logs');\n        };\n    }, []);\n\n    return (\n        <div className=\"bg-white p-4 rounded shadow h-full\">\n            <h2 className=\"text-xl font-bold mb-4\">Weight</h2>\n            <ReactApexChart options={options} series={series} type=\"line\" height={300} />\n        </div>\n    );\n};\n\nexport const LineChart2: React.FC = () => {\n    const [series, setSeries] = useState([\n        {\n            name: 'Temperature',\n            data: []\n        }\n    ]);\n\n    const options: ApexOptions = {\n        chart: {\n            type: 'line',\n            animations: {\n                enabled: true,\n                easing: 'linear',\n                dynamicAnimation: {\n                    speed: 1000\n                }\n            }\n        },\n        colors: ['#dc3545'],\n        stroke: {\n            curve: 'smooth'\n        },\n        xaxis: {\n            type: 'datetime'\n        },\n        tooltip: {\n            x: {\n                format: 'HH:mm:ss'\n            }\n        }\n    };\n\n    useEffect(() => {\n        socket.on('data-logs', (data) => {\n            setSeries((prevSeries) => [\n                {\n                    ...prevSeries[0],\n                    data: [...prevSeries[0].data, { x: new Date(data.createdAt).getTime(), y: parseFloat(data.temp) }]\n                }\n            ]);\n        });\n\n        return () => {\n            socket.off('data-logs');\n        };\n    }, []);\n\n    return (\n        <div className=\"bg-white p-4 rounded shadow h-full\">\n            <h2 className=\"text-xl font-bold mb-4\">Temperature</h2>\n            <ReactApexChart options={options} series={series} type=\"line\" height={300} />\n        </div>\n    );\n};\n\n\n\n// export const AreaChart: React.FC = () => {\n//     const [series, setSeries] = useState([\n//         {\n//             name: 'Vibration',\n//             data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n//         },\n//         {\n//             name: 'Weight',\n//             data: [50, 55, 52, 56, 54, 53, 51, 55, 52]\n//         }\n//     ]);\n\n//     const options: ApexOptions = {\n//         chart: {\n//             type: 'area',\n//             animations: {\n//                 enabled: true,\n//                 easing: 'linear',\n//                 dynamicAnimation: {\n//                     speed: 1000\n//                 }\n//             }\n//         },\n//         colors: ['#28a745', '#dc3545'],\n//         stroke: {\n//             curve: 'smooth'\n//         },\n//         xaxis: {\n//             type: 'datetime',\n//             categories: [\n//                 '2023-06-01T00:00:00Z',\n//                 '2023-06-02T00:00:00Z',\n//                 '2023-06-03T00:00:00Z',\n//                 '2023-06-04T00:00:00Z',\n//                 '2023-06-05T00:00:00Z',\n//                 '2023-06-06T00:00:00Z',\n//                 '2023-06-07T00:00:00Z',\n//                 '2023-06-08T00:00:00Z',\n//                 '2023-06-09T00:00:00Z'\n//             ]\n//         },\n//         tooltip: {\n//             x: {\n//                 format: 'dd MMM yyyy'\n//             }\n//         }\n//     };\n\n//     useEffect(() => {\n//         // Simulate real-time data update\n//         const interval = setInterval(() => {\n//             setSeries(prevSeries => [\n//                 {\n//                     ...prevSeries[0],\n//                     data: prevSeries[0].data.map(value => value + Math.random() * 10 - 5)\n//                 },\n//                 {\n//                     ...prevSeries[1],\n//                     data: prevSeries[1].data.map(value => value + Math.random() * 3 - 1.5)\n//                 }\n//             ]);\n//         }, 2000);\n\n//         return () => clearInterval(interval);\n//     }, []);\n\n//     return (\n//         <div className=\"bg-white p-4 rounded shadow h-full\">\n//             <h2 className=\"text-xl font-bold mb-4\">Bridge Vibration over Time </h2>\n//             <ReactApexChart options={options} series={series} type=\"area\" height={300} />\n//         </div>\n//     );\n// };\n\n\ninterface SeriesData {\n    name: string;\n    data: { x: number; y: number; }[];\n}\n\nexport const BarChart: React.FC = () => {\n    const [series, setSeries] = useState<SeriesData[]>([\n        {\n            name: 'Vibration',\n            data: []\n        },\n        {\n            name: 'Weight',\n            data: []\n        }\n    ]);\n\n    const options: ApexOptions = {\n        chart: {\n            type: 'bar',\n            stacked: true,\n            toolbar: {\n                show: false\n            },\n            animations: {\n                enabled: true,\n                easing: 'linear',\n                dynamicAnimation: {\n                    speed: 1000\n                }\n            }\n        },\n        plotOptions: {\n            bar: {\n                horizontal: true,\n                barHeight: '80%'\n            }\n        },\n        colors: ['#28a745', '#007bff'],\n        xaxis: {\n            type: 'numeric',\n            labels: {\n                formatter: function (val) {\n                    return new Date(val).toLocaleTimeString();\n                }\n            }\n        },\n        dataLabels: {\n            enabled: false\n        },\n        tooltip: {\n            y: {\n                formatter: function (val) {\n                    return val.toFixed(2);\n                }\n            }\n        }\n    };\n\n    useEffect(() => {\n        // Simulate real-time data update\n        const interval = setInterval(() => {\n            const now = Date.now();\n\n            setSeries(prevSeries => [\n                {\n                    ...prevSeries[0],\n                    data: [...prevSeries[0].data.slice(-10), {\n                        x: now,\n                        y: Math.random() * 1000\n                    }]\n                },\n                {\n                    ...prevSeries[1],\n                    data: [...prevSeries[1].data.slice(-10), {\n                        x: now,\n                        y: Math.random() * 2000\n                    }]\n                }\n            ]);\n        }, 10000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"bg-white p-4 rounded shadow h-full\">\n            <h2 className=\"text-xl font-bold mb-4\">Vibration over Weight</h2>\n            <ReactApexChart options={options} series={series} type=\"bar\" height={300} />\n        </div>\n    );\n};\n\nexport const BarChart2: React.FC = () => {\n    const [series, setSeries] = useState([\n        {\n            name: 'Vibration',\n            data: [10, 41, 35, 51, 49, 62, 69, 91, 148]\n        },\n        {\n            name: 'Temperature',\n            data: [25, 30, 28, 32, 29, 27, 26, 31, 30]\n        },\n        {\n            name: 'Weight',\n            data: [50, 55, 52, 56, 54, 53, 51, 55, 52]\n        }\n    ]);\n\n    const options: ApexOptions = {\n        chart: {\n            type: 'bar',\n            animations: {\n                enabled: true,\n                easing: 'linear',\n                dynamicAnimation: {\n                    speed: 1000\n                }\n            }\n        },\n        colors: ['#28a745', '#007bff', '#dc3545'],\n        xaxis: {\n            type: 'datetime',\n            categories: [\n                '2023-06-01T00:00:00Z',\n                '2023-06-02T00:00:00Z',\n                '2023-06-03T00:00:00Z',\n                '2023-06-04T00:00:00Z',\n                '2023-06-05T00:00:00Z',\n                '2023-06-06T00:00:00Z',\n                '2023-06-07T00:00:00Z',\n                '2023-06-08T00:00:00Z',\n                '2023-06-09T00:00:00Z'\n            ]\n        },\n        tooltip: {\n            x: {\n                format: 'dd MMM yyyy'\n            }\n        }\n    };\n\n    useEffect(() => {\n        // Simulate real-time data update\n        const interval = setInterval(() => {\n            setSeries(prevSeries => [\n                {\n                    ...prevSeries[0],\n                    data: prevSeries[0].data.map(value => value + Math.random() * 10 - 5)\n                },\n                {\n                    ...prevSeries[1],\n                    data: prevSeries[1].data.map(value => value + Math.random() * 2 - 1)\n                },\n                {\n                    ...prevSeries[2],\n                    data: prevSeries[2].data.map(value => value + Math.random() * 3 - 1.5)\n                }\n            ]);\n        }, 2000);\n\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"bg-white p-4 rounded shadow h-full\">\n            <h2 className=\"text-xl font-bold mb-4\"> Vibration over Temperature</h2>\n            <ReactApexChart options={options} series={series} type=\"bar\" height={300} />\n        </div>\n    );\n};\n\n"],"mappings":";;;;;;AAAA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGH,EAAE,CAAC,uBAAuB,CAAC;;AAE1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAO,MAAMI,SAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CACjC;IACIU,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE;EACV,CAAC,CACJ,CAAC;EAEF,MAAMC,OAAoB,GAAG;IACzBC,KAAK,EAAE;MACHC,IAAI,EAAE,MAAM;MACZC,UAAU,EAAE;QACRC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,QAAQ;QAChBC,gBAAgB,EAAE;UACdC,KAAK,EAAE;QACX;MACJ;IACJ,CAAC;IACDC,MAAM,EAAE,CAAC,SAAS,CAAC;IACnBC,MAAM,EAAE;MACJC,KAAK,EAAE;IACX,CAAC;IACDC,KAAK,EAAE;MACHT,IAAI,EAAE;IACV,CAAC;IACDU,OAAO,EAAE;MACLC,CAAC,EAAE;QACCC,MAAM,EAAE;MACZ;IACJ;EACJ,CAAC;EAED3B,SAAS,CAAC,MAAM;IACZM,MAAM,CAACsB,EAAE,CAAC,WAAW,EAAGhB,IAAI,IAAK;MAC7BF,SAAS,CAAEmB,UAAU,IAAK,CACtB;QACI,GAAGA,UAAU,CAAC,CAAC,CAAC;QAChBjB,IAAI,EAAE,CAAC,GAAGiB,UAAU,CAAC,CAAC,CAAC,CAACjB,IAAI,EAAE;UAAEc,CAAC,EAAE,IAAII,IAAI,CAAClB,IAAI,CAACmB,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC;UAAEC,CAAC,EAAEC,UAAU,CAACtB,IAAI,CAACuB,GAAG;QAAE,CAAC;MACpG,CAAC,CACJ,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAM;MACT7B,MAAM,CAAC8B,GAAG,CAAC,WAAW,CAAC;IAC3B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI/B,OAAA;IAAKgC,SAAS,EAAC,oCAAoC;IAAAC,QAAA,gBAC/CjC,OAAA;MAAIgC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrDrC,OAAA,CAACH,cAAc;MAACW,OAAO,EAAEA,OAAQ;MAACJ,MAAM,EAAEA,MAAO;MAACM,IAAI,EAAC,MAAM;MAAC4B,MAAM,EAAE;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5E,CAAC;AAEd,CAAC;AAAClC,EAAA,CAtDWD,SAAmB;AAAAqC,EAAA,GAAnBrC,SAAmB;AAuDhC,OAAO,MAAMsC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACtC,MAAM,CAACrC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CACjC;IACIU,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;EACV,CAAC,CACJ,CAAC;EAEF,MAAMC,OAAoB,GAAG;IACzBC,KAAK,EAAE;MACHC,IAAI,EAAE,MAAM;MACZC,UAAU,EAAE;QACRC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,QAAQ;QAChBC,gBAAgB,EAAE;UACdC,KAAK,EAAE;QACX;MACJ;IACJ,CAAC;IACDC,MAAM,EAAE,CAAC,SAAS,CAAC;IACnBC,MAAM,EAAE;MACJC,KAAK,EAAE;IACX,CAAC;IACDC,KAAK,EAAE;MACHT,IAAI,EAAE;IACV,CAAC;IACDU,OAAO,EAAE;MACLC,CAAC,EAAE;QACCC,MAAM,EAAE;MACZ;IACJ;EACJ,CAAC;EAED3B,SAAS,CAAC,MAAM;IACZM,MAAM,CAACsB,EAAE,CAAC,WAAW,EAAGhB,IAAI,IAAK;MAC7BF,SAAS,CAAEmB,UAAU,IAAK,CACtB;QACI,GAAGA,UAAU,CAAC,CAAC,CAAC;QAChBjB,IAAI,EAAE,CAAC,GAAGiB,UAAU,CAAC,CAAC,CAAC,CAACjB,IAAI,EAAE;UAAEc,CAAC,EAAE,IAAII,IAAI,CAAClB,IAAI,CAACmB,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC;UAAEC,CAAC,EAAEC,UAAU,CAACtB,IAAI,CAACmC,GAAG;QAAE,CAAC;MACpG,CAAC,CACJ,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAM;MACTzC,MAAM,CAAC8B,GAAG,CAAC,WAAW,CAAC;IAC3B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI/B,OAAA;IAAKgC,SAAS,EAAC,oCAAoC;IAAAC,QAAA,gBAC/CjC,OAAA;MAAIgC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClDrC,OAAA,CAACH,cAAc;MAACW,OAAO,EAAEA,OAAQ;MAACJ,MAAM,EAAEA,MAAO;MAACM,IAAI,EAAC,MAAM;MAAC4B,MAAM,EAAE;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5E,CAAC;AAEd,CAAC;AAACI,GAAA,CAtDWD,UAAoB;AAAAG,GAAA,GAApBH,UAAoB;AAwDjC,OAAO,MAAMI,UAAoB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACtC,MAAM,CAACzC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CACjC;IACIU,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE;EACV,CAAC,CACJ,CAAC;EAEF,MAAMC,OAAoB,GAAG;IACzBC,KAAK,EAAE;MACHC,IAAI,EAAE,MAAM;MACZC,UAAU,EAAE;QACRC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,QAAQ;QAChBC,gBAAgB,EAAE;UACdC,KAAK,EAAE;QACX;MACJ;IACJ,CAAC;IACDC,MAAM,EAAE,CAAC,SAAS,CAAC;IACnBC,MAAM,EAAE;MACJC,KAAK,EAAE;IACX,CAAC;IACDC,KAAK,EAAE;MACHT,IAAI,EAAE;IACV,CAAC;IACDU,OAAO,EAAE;MACLC,CAAC,EAAE;QACCC,MAAM,EAAE;MACZ;IACJ;EACJ,CAAC;EAED3B,SAAS,CAAC,MAAM;IACZM,MAAM,CAACsB,EAAE,CAAC,WAAW,EAAGhB,IAAI,IAAK;MAC7BF,SAAS,CAAEmB,UAAU,IAAK,CACtB;QACI,GAAGA,UAAU,CAAC,CAAC,CAAC;QAChBjB,IAAI,EAAE,CAAC,GAAGiB,UAAU,CAAC,CAAC,CAAC,CAACjB,IAAI,EAAE;UAAEc,CAAC,EAAE,IAAII,IAAI,CAAClB,IAAI,CAACmB,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC;UAAEC,CAAC,EAAEC,UAAU,CAACtB,IAAI,CAACuC,IAAI;QAAE,CAAC;MACrG,CAAC,CACJ,CAAC;IACN,CAAC,CAAC;IAEF,OAAO,MAAM;MACT7C,MAAM,CAAC8B,GAAG,CAAC,WAAW,CAAC;IAC3B,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI/B,OAAA;IAAKgC,SAAS,EAAC,oCAAoC;IAAAC,QAAA,gBAC/CjC,OAAA;MAAIgC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvDrC,OAAA,CAACH,cAAc;MAACW,OAAO,EAAEA,OAAQ;MAACJ,MAAM,EAAEA,MAAO;MAACM,IAAI,EAAC,MAAM;MAAC4B,MAAM,EAAE;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5E,CAAC;AAEd,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAQ,GAAA,CAlIaD,UAAoB;AAAAG,GAAA,GAApBH,UAAoB;AA0IjC,OAAO,MAAMI,QAAkB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAM,CAAC7C,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAe,CAC/C;IACIU,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE;EACV,CAAC,EACD;IACID,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;EACV,CAAC,CACJ,CAAC;EAEF,MAAMC,OAAoB,GAAG;IACzBC,KAAK,EAAE;MACHC,IAAI,EAAE,KAAK;MACXwC,OAAO,EAAE,IAAI;MACbC,OAAO,EAAE;QACLC,IAAI,EAAE;MACV,CAAC;MACDzC,UAAU,EAAE;QACRC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,QAAQ;QAChBC,gBAAgB,EAAE;UACdC,KAAK,EAAE;QACX;MACJ;IACJ,CAAC;IACDsC,WAAW,EAAE;MACTC,GAAG,EAAE;QACDC,UAAU,EAAE,IAAI;QAChBC,SAAS,EAAE;MACf;IACJ,CAAC;IACDxC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC;IAC9BG,KAAK,EAAE;MACHT,IAAI,EAAE,SAAS;MACf+C,MAAM,EAAE;QACJC,SAAS,EAAE,SAAAA,CAAUC,GAAG,EAAE;UACtB,OAAO,IAAIlC,IAAI,CAACkC,GAAG,CAAC,CAACC,kBAAkB,CAAC,CAAC;QAC7C;MACJ;IACJ,CAAC;IACDC,UAAU,EAAE;MACRjD,OAAO,EAAE;IACb,CAAC;IACDQ,OAAO,EAAE;MACLQ,CAAC,EAAE;QACC8B,SAAS,EAAE,SAAAA,CAAUC,GAAG,EAAE;UACtB,OAAOA,GAAG,CAACG,OAAO,CAAC,CAAC,CAAC;QACzB;MACJ;IACJ;EACJ,CAAC;EAEDnE,SAAS,CAAC,MAAM;IACZ;IACA,MAAMoE,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B,MAAMC,GAAG,GAAGxC,IAAI,CAACwC,GAAG,CAAC,CAAC;MAEtB5D,SAAS,CAACmB,UAAU,IAAI,CACpB;QACI,GAAGA,UAAU,CAAC,CAAC,CAAC;QAChBjB,IAAI,EAAE,CAAC,GAAGiB,UAAU,CAAC,CAAC,CAAC,CAACjB,IAAI,CAAC2D,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;UACrC7C,CAAC,EAAE4C,GAAG;UACNrC,CAAC,EAAEuC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;QACvB,CAAC;MACL,CAAC,EACD;QACI,GAAG5C,UAAU,CAAC,CAAC,CAAC;QAChBjB,IAAI,EAAE,CAAC,GAAGiB,UAAU,CAAC,CAAC,CAAC,CAACjB,IAAI,CAAC2D,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE;UACrC7C,CAAC,EAAE4C,GAAG;UACNrC,CAAC,EAAEuC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG;QACvB,CAAC;MACL,CAAC,CACJ,CAAC;IACN,CAAC,EAAE,KAAK,CAAC;IAET,OAAO,MAAMC,aAAa,CAACN,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI/D,OAAA;IAAKgC,SAAS,EAAC,oCAAoC;IAAAC,QAAA,gBAC/CjC,OAAA;MAAIgC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjErC,OAAA,CAACH,cAAc;MAACW,OAAO,EAAEA,OAAQ;MAACJ,MAAM,EAAEA,MAAO;MAACM,IAAI,EAAC,KAAK;MAAC4B,MAAM,EAAE;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEd,CAAC;AAACY,GAAA,CAtFWD,QAAkB;AAAAsB,GAAA,GAAlBtB,QAAkB;AAwF/B,OAAO,MAAMuB,SAAmB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACrC,MAAM,CAACpE,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CACjC;IACIU,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG;EAC9C,CAAC,EACD;IACID,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EAC7C,CAAC,EACD;IACID,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;EAC7C,CAAC,CACJ,CAAC;EAEF,MAAMC,OAAoB,GAAG;IACzBC,KAAK,EAAE;MACHC,IAAI,EAAE,KAAK;MACXC,UAAU,EAAE;QACRC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,QAAQ;QAChBC,gBAAgB,EAAE;UACdC,KAAK,EAAE;QACX;MACJ;IACJ,CAAC;IACDC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;IACzCG,KAAK,EAAE;MACHT,IAAI,EAAE,UAAU;MAChB+D,UAAU,EAAE,CACR,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB;IAE9B,CAAC;IACDrD,OAAO,EAAE;MACLC,CAAC,EAAE;QACCC,MAAM,EAAE;MACZ;IACJ;EACJ,CAAC;EAED3B,SAAS,CAAC,MAAM;IACZ;IACA,MAAMoE,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B3D,SAAS,CAACmB,UAAU,IAAI,CACpB;QACI,GAAGA,UAAU,CAAC,CAAC,CAAC;QAChBjB,IAAI,EAAEiB,UAAU,CAAC,CAAC,CAAC,CAACjB,IAAI,CAACmE,GAAG,CAACC,KAAK,IAAIA,KAAK,GAAGR,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;MACxE,CAAC,EACD;QACI,GAAG5C,UAAU,CAAC,CAAC,CAAC;QAChBjB,IAAI,EAAEiB,UAAU,CAAC,CAAC,CAAC,CAACjB,IAAI,CAACmE,GAAG,CAACC,KAAK,IAAIA,KAAK,GAAGR,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC;MACvE,CAAC,EACD;QACI,GAAG5C,UAAU,CAAC,CAAC,CAAC;QAChBjB,IAAI,EAAEiB,UAAU,CAAC,CAAC,CAAC,CAACjB,IAAI,CAACmE,GAAG,CAACC,KAAK,IAAIA,KAAK,GAAGR,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG;MACzE,CAAC,CACJ,CAAC;IACN,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMC,aAAa,CAACN,QAAQ,CAAC;EACxC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACI/D,OAAA;IAAKgC,SAAS,EAAC,oCAAoC;IAAAC,QAAA,gBAC/CjC,OAAA;MAAIgC,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAA2B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvErC,OAAA,CAACH,cAAc;MAACW,OAAO,EAAEA,OAAQ;MAACJ,MAAM,EAAEA,MAAO;MAACM,IAAI,EAAC,KAAK;MAAC4B,MAAM,EAAE;IAAI;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEd,CAAC;AAACmC,GAAA,CA7EWD,SAAmB;AAAAK,GAAA,GAAnBL,SAAmB;AAAA,IAAAhC,EAAA,EAAAI,GAAA,EAAAI,GAAA,EAAAuB,GAAA,EAAAM,GAAA;AAAAC,YAAA,CAAAtC,EAAA;AAAAsC,YAAA,CAAAlC,GAAA;AAAAkC,YAAA,CAAA9B,GAAA;AAAA8B,YAAA,CAAAP,GAAA;AAAAO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}