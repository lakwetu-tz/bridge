{"ast":null,"code":"var _jsxFileName = \"/home/willbroad/Documents/enock_projects/BMS/frontend/bridge/src/context/AuthProvider.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n// import { auth } from '../utils/firebase';\n// import { User, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, updateEmail, updatePassword, onAuthStateChanged } from 'firebase/auth';\n\n// type AuthContextType = {\n//     currentUser: User | null;\n//     signup: (email: string, password: string) => Promise<void>;\n//     signin: (email: string, password: string) => Promise<void>;\n//     signout: () => Promise<void>;\n//     resetPassword: (email: string) => Promise<void>;\n//     // updateEmail: (email: string) => Promise<void>;\n//     // updatePassword: (password: string) => Promise<void>;\n// };\n\n// const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// export function useAuth() {\n//     const context = useContext(AuthContext);\n//     if (!context) {\n//         throw new Error('useAuth must be used within an AuthProvider');\n//     }\n//     return context;\n// }\n\n// type AuthProviderProps = {\n//     children: ReactNode;\n// };\n\n// export function AuthProvider({ children }: AuthProviderProps) {\n//     const [currentUser, setCurrentUser] = useState<User | null>(null);\n//     const [loading, setLoading] = useState(true);\n\n//     const signup = (email: string, password: string) => {\n//         return createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n//             setCurrentUser(userCredential.user);\n//         });\n//     };\n\n//     const signin = (email: string, password: string) => {\n//         return signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n//             setCurrentUser(userCredential.user);\n//         });\n//     };\n\n//     const signout = () => {\n//         return signOut(auth).then(() => {\n//             setCurrentUser(null);\n//         });\n//     };\n\n//     const resetPassword = (email: string) => {\n//         return sendPasswordResetEmail(auth, email);\n//     };\n\n//     // const updateEmail = (email: string) => {\n//     //     if (currentUser) {\n//     //         return updateEmail(currentUser, email);\n//     //     } else {\n//     //         return Promise.reject('No user is currently signed in');\n//     //     }\n//     // };\n\n//     // const updatePassword = (password: string) => {\n//     //     if (currentUser) {\n//     //         return updatePassword(currentUser, password);\n//     //     } else {\n//     //         return Promise.reject('No user is currently signed in');\n//     //     }\n//     // };\n\n//     useEffect(() => {\n//         const unsubscribe = onAuthStateChanged(auth, (user) => {\n//             setCurrentUser(user);\n//             setLoading(false);\n//         });\n\n//         return unsubscribe;\n//     }, []);\n\n//     const value: AuthContextType = {\n//         currentUser,\n//         signup,\n//         signin,\n//         signout,\n//         resetPassword,\n//         // updateEmail,\n//         // updatePassword,\n//     };\n\n//     return (\n//         <AuthContext.Provider value={value}>\n//             {!loading && children}\n//         </AuthContext.Provider>\n//     );\n// }\n\n// export default AuthProvider;\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  currentUser: null,\n  signin: async () => {},\n  signout: async () => {}\n});\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [isLogin, setIsLogin] = useState(false);\n  useEffect(() => {\n    // Check localStorage for existing user session\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      setCurrentUser(JSON.parse(storedUser));\n    }\n  }, []);\n  const signin = async (email, password) => {\n    // Implement your actual sign-in logic here\n    // This example uses localStorage for demo purposes\n    localStorage.setItem('currentUser', JSON.stringify({\n      email\n    }));\n    setCurrentUser({\n      email\n    });\n  };\n  const signout = async () => {\n    // Implement your actual sign-out logic here\n    // This example uses localStorage for demo purposes\n    localStorage.removeItem('currentUser');\n    setCurrentUser(null);\n    nav;\n  };\n  const value = {\n    currentUser,\n    signin,\n    signout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 12\n  }, this);\n};\n_s2(AuthProvider, \"CBOB2zHHgbi6/sPoikuwYJljkNs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","currentUser","signin","signout","useAuth","_s","AuthProvider","children","_s2","setCurrentUser","isLogin","setIsLogin","storedUser","localStorage","getItem","JSON","parse","email","password","setItem","stringify","removeItem","nav","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/willbroad/Documents/enock_projects/BMS/frontend/bridge/src/context/AuthProvider.tsx"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n// import { auth } from '../utils/firebase';\n// import { User, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, updateEmail, updatePassword, onAuthStateChanged } from 'firebase/auth';\n\n// type AuthContextType = {\n//     currentUser: User | null;\n//     signup: (email: string, password: string) => Promise<void>;\n//     signin: (email: string, password: string) => Promise<void>;\n//     signout: () => Promise<void>;\n//     resetPassword: (email: string) => Promise<void>;\n//     // updateEmail: (email: string) => Promise<void>;\n//     // updatePassword: (password: string) => Promise<void>;\n// };\n\n// const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// export function useAuth() {\n//     const context = useContext(AuthContext);\n//     if (!context) {\n//         throw new Error('useAuth must be used within an AuthProvider');\n//     }\n//     return context;\n// }\n\n// type AuthProviderProps = {\n//     children: ReactNode;\n// };\n\n// export function AuthProvider({ children }: AuthProviderProps) {\n//     const [currentUser, setCurrentUser] = useState<User | null>(null);\n//     const [loading, setLoading] = useState(true);\n\n//     const signup = (email: string, password: string) => {\n//         return createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n//             setCurrentUser(userCredential.user);\n//         });\n//     };\n\n//     const signin = (email: string, password: string) => {\n//         return signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n//             setCurrentUser(userCredential.user);\n//         });\n//     };\n\n//     const signout = () => {\n//         return signOut(auth).then(() => {\n//             setCurrentUser(null);\n//         });\n//     };\n\n//     const resetPassword = (email: string) => {\n//         return sendPasswordResetEmail(auth, email);\n//     };\n\n//     // const updateEmail = (email: string) => {\n//     //     if (currentUser) {\n//     //         return updateEmail(currentUser, email);\n//     //     } else {\n//     //         return Promise.reject('No user is currently signed in');\n//     //     }\n//     // };\n\n//     // const updatePassword = (password: string) => {\n//     //     if (currentUser) {\n//     //         return updatePassword(currentUser, password);\n//     //     } else {\n//     //         return Promise.reject('No user is currently signed in');\n//     //     }\n//     // };\n\n//     useEffect(() => {\n//         const unsubscribe = onAuthStateChanged(auth, (user) => {\n//             setCurrentUser(user);\n//             setLoading(false);\n//         });\n\n//         return unsubscribe;\n//     }, []);\n\n//     const value: AuthContextType = {\n//         currentUser,\n//         signup,\n//         signin,\n//         signout,\n//         resetPassword,\n//         // updateEmail,\n//         // updatePassword,\n//     };\n\n//     return (\n//         <AuthContext.Provider value={value}>\n//             {!loading && children}\n//         </AuthContext.Provider>\n//     );\n// }\n\n// export default AuthProvider;\n\n\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\ntype AuthContextType = {\n    currentUser: { email: string } | null;\n    signin: (email: string, password: string) => Promise<void>;\n    signout: () => Promise<void>;\n};\n\nconst AuthContext = createContext<AuthContextType>({\n    currentUser: null,\n    signin: async () => { },\n    signout: async () => { },\n});\n\nexport const useAuth = () => useContext(AuthContext);\n\nexport const AuthProvider: React.FC<React.PropsWithChildren<{}>> = ({ children }) => {\n    const [currentUser, setCurrentUser] = useState<{ email: string } | null>(null);\n    const [ isLogin, setIsLogin ] = useState<boolean>(false)\n\n    useEffect(() => {\n        // Check localStorage for existing user session\n        const storedUser = localStorage.getItem('currentUser');\n        if (storedUser) {\n            setCurrentUser(JSON.parse(storedUser));\n        }\n    }, []);\n\n    const signin = async (email: string, password: string) => {\n        // Implement your actual sign-in logic here\n        // This example uses localStorage for demo purposes\n        localStorage.setItem('currentUser', JSON.stringify({ email }));\n        setCurrentUser({ email });\n    };\n\n    const signout = async () => {\n        // Implement your actual sign-out logic here\n        // This example uses localStorage for demo purposes\n        localStorage.removeItem('currentUser');\n        setCurrentUser(null);\n        nav\n    };\n\n    const value: AuthContextType = {\n        currentUser,\n        signin,\n        signout,\n    };\n\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQ9E,MAAMC,WAAW,gBAAGN,aAAa,CAAkB;EAC/CO,WAAW,EAAE,IAAI;EACjBC,MAAM,EAAE,MAAAA,CAAA,KAAY,CAAE,CAAC;EACvBC,OAAO,EAAE,MAAAA,CAAA,KAAY,CAAE;AAC3B,CAAC,CAAC;AAEF,OAAO,MAAMC,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMV,UAAU,CAACK,WAAW,CAAC;AAAA;AAACK,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAmD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACjF,MAAM,CAACP,WAAW,EAAEQ,cAAc,CAAC,GAAGb,QAAQ,CAA2B,IAAI,CAAC;EAC9E,MAAM,CAAEc,OAAO,EAAEC,UAAU,CAAE,GAAGf,QAAQ,CAAU,KAAK,CAAC;EAExDC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMe,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IACtD,IAAIF,UAAU,EAAE;MACZH,cAAc,CAACM,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IAC1C;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMV,MAAM,GAAG,MAAAA,CAAOe,KAAa,EAAEC,QAAgB,KAAK;IACtD;IACA;IACAL,YAAY,CAACM,OAAO,CAAC,aAAa,EAAEJ,IAAI,CAACK,SAAS,CAAC;MAAEH;IAAM,CAAC,CAAC,CAAC;IAC9DR,cAAc,CAAC;MAAEQ;IAAM,CAAC,CAAC;EAC7B,CAAC;EAED,MAAMd,OAAO,GAAG,MAAAA,CAAA,KAAY;IACxB;IACA;IACAU,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC;IACtCZ,cAAc,CAAC,IAAI,CAAC;IACpBa,GAAG;EACP,CAAC;EAED,MAAMC,KAAsB,GAAG;IAC3BtB,WAAW;IACXC,MAAM;IACNC;EACJ,CAAC;EAED,oBAAOJ,OAAA,CAACC,WAAW,CAACwB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAhB,QAAA,EAAEA;EAAQ;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AAChF,CAAC;AAACpB,GAAA,CAlCWF,YAAmD;AAAAuB,EAAA,GAAnDvB,YAAmD;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}