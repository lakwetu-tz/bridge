{"ast":null,"code":"// import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n// import { auth } from '../utils/firebase';\n// import { User, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, updateEmail, updatePassword, onAuthStateChanged } from 'firebase/auth';\n\n// type AuthContextType = {\n//     currentUser: User | null;\n//     signup: (email: string, password: string) => Promise<void>;\n//     signin: (email: string, password: string) => Promise<void>;\n//     signout: () => Promise<void>;\n//     resetPassword: (email: string) => Promise<void>;\n//     // updateEmail: (email: string) => Promise<void>;\n//     // updatePassword: (password: string) => Promise<void>;\n// };\n\n// const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// export function useAuth() {\n//     const context = useContext(AuthContext);\n//     if (!context) {\n//         throw new Error('useAuth must be used within an AuthProvider');\n//     }\n//     return context;\n// }\n\n// type AuthProviderProps = {\n//     children: ReactNode;\n// };\n\n// export function AuthProvider({ children }: AuthProviderProps) {\n//     const [currentUser, setCurrentUser] = useState<User | null>(null);\n//     const [loading, setLoading] = useState(true);\n\n//     const signup = (email: string, password: string) => {\n//         return createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n//             setCurrentUser(userCredential.user);\n//         });\n//     };\n\n//     const signin = (email: string, password: string) => {\n//         return signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n//             setCurrentUser(userCredential.user);\n//         });\n//     };\n\n//     const signout = () => {\n//         return signOut(auth).then(() => {\n//             setCurrentUser(null);\n//         });\n//     };\n\n//     const resetPassword = (email: string) => {\n//         return sendPasswordResetEmail(auth, email);\n//     };\n\n//     // const updateEmail = (email: string) => {\n//     //     if (currentUser) {\n//     //         return updateEmail(currentUser, email);\n//     //     } else {\n//     //         return Promise.reject('No user is currently signed in');\n//     //     }\n//     // };\n\n//     // const updatePassword = (password: string) => {\n//     //     if (currentUser) {\n//     //         return updatePassword(currentUser, password);\n//     //     } else {\n//     //         return Promise.reject('No user is currently signed in');\n//     //     }\n//     // };\n\n//     useEffect(() => {\n//         const unsubscribe = onAuthStateChanged(auth, (user) => {\n//             setCurrentUser(user);\n//             setLoading(false);\n//         });\n\n//         return unsubscribe;\n//     }, []);\n\n//     const value: AuthContextType = {\n//         currentUser,\n//         signup,\n//         signin,\n//         signout,\n//         resetPassword,\n//         // updateEmail,\n//         // updatePassword,\n//     };\n\n//     return (\n//         <AuthContext.Provider value={value}>\n//             {!loading && children}\n//         </AuthContext.Provider>\n//     );\n// }\n\n// export default AuthProvider;","map":{"version":3,"names":[],"sources":["/home/willbroad/Documents/enock_projects/BMS/frontend/bridge/src/context/AuthProvider.tsx"],"sourcesContent":["// import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n// import { auth } from '../utils/firebase';\n// import { User, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, sendPasswordResetEmail, updateEmail, updatePassword, onAuthStateChanged } from 'firebase/auth';\n\n// type AuthContextType = {\n//     currentUser: User | null;\n//     signup: (email: string, password: string) => Promise<void>;\n//     signin: (email: string, password: string) => Promise<void>;\n//     signout: () => Promise<void>;\n//     resetPassword: (email: string) => Promise<void>;\n//     // updateEmail: (email: string) => Promise<void>;\n//     // updatePassword: (password: string) => Promise<void>;\n// };\n\n// const AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// export function useAuth() {\n//     const context = useContext(AuthContext);\n//     if (!context) {\n//         throw new Error('useAuth must be used within an AuthProvider');\n//     }\n//     return context;\n// }\n\n// type AuthProviderProps = {\n//     children: ReactNode;\n// };\n\n// export function AuthProvider({ children }: AuthProviderProps) {\n//     const [currentUser, setCurrentUser] = useState<User | null>(null);\n//     const [loading, setLoading] = useState(true);\n\n//     const signup = (email: string, password: string) => {\n//         return createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n//             setCurrentUser(userCredential.user);\n//         });\n//     };\n\n//     const signin = (email: string, password: string) => {\n//         return signInWithEmailAndPassword(auth, email, password).then(userCredential => {\n//             setCurrentUser(userCredential.user);\n//         });\n//     };\n\n//     const signout = () => {\n//         return signOut(auth).then(() => {\n//             setCurrentUser(null);\n//         });\n//     };\n\n//     const resetPassword = (email: string) => {\n//         return sendPasswordResetEmail(auth, email);\n//     };\n\n//     // const updateEmail = (email: string) => {\n//     //     if (currentUser) {\n//     //         return updateEmail(currentUser, email);\n//     //     } else {\n//     //         return Promise.reject('No user is currently signed in');\n//     //     }\n//     // };\n\n//     // const updatePassword = (password: string) => {\n//     //     if (currentUser) {\n//     //         return updatePassword(currentUser, password);\n//     //     } else {\n//     //         return Promise.reject('No user is currently signed in');\n//     //     }\n//     // };\n\n//     useEffect(() => {\n//         const unsubscribe = onAuthStateChanged(auth, (user) => {\n//             setCurrentUser(user);\n//             setLoading(false);\n//         });\n\n//         return unsubscribe;\n//     }, []);\n\n//     const value: AuthContextType = {\n//         currentUser,\n//         signup,\n//         signin,\n//         signout,\n//         resetPassword,\n//         // updateEmail,\n//         // updatePassword,\n//     };\n\n//     return (\n//         <AuthContext.Provider value={value}>\n//             {!loading && children}\n//         </AuthContext.Provider>\n//     );\n// }\n\n// export default AuthProvider;\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}